# Project Instructions

Your goal is to improve the provided file classifier by adding features and optimizations to handle poorly named files, scale to new industries, and process larger volumes of documents.

Write complete, working code for every step. Do not get lazy.

## Overview

This repository contains a coding challenge from Heron to enhance a file classifier. The task involves improving its ability to handle poorly named files, scale to new industries, and process large volumes of documents.

## Tech Stack

- **Backend**: Python (Flask, FastAPI)
- **Infrastructure**: Terraform, GCP, AWS (as per image, though not explicitly in README for initial setup)
- **Frontend**: React, JavaScript, TypeScript, Vercel (as per image, though not explicitly in README for initial setup)
- **Testing**: pytest

## Python Best Practices

- **PEP 8**: Adhere to PEP 8 style guidelines for code formatting.
- **Docstrings & Type Hints**:
  - Provide comprehensive docstrings for all modules, classes, functions, and methods.
  - Use the `typing` module for proper type annotations for all function signatures (arguments and return types) and variables.
- **Error Handling**:
  - Implement robust error handling using specific exception types.
  - Avoid catching generic `Exception` where possible.
- **Logging**:
  - Use the `logging` module for application logging.
  - Employ appropriate log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL).
  - Include contextual information in log messages.
- **Modularity**: Write small, focused functions and classes.
- **Dependencies**: Manage dependencies using `requirements.txt`. Ensure it is kept up-to-date.
- **Virtual Environments**: Always use a virtual environment (e.g., `venv`) for project dependencies.

## Flask/FastAPI Best Practices

- **Project Structure**: Organize the application into blueprints (Flask) or routers (FastAPI) for better modularity.
- **Configuration**: Manage configurations effectively (e.g., using environment variables or configuration files).
- **Request Validation**: Validate incoming request data (e.g., using Pydantic for FastAPI or Marshmallow/WTForms for Flask).
- **Response Formatting**: Ensure consistent and clear API response formats (e.g., JSON).
- **Error Handling**: Implement centralized error handlers to provide meaningful error responses.
- **Asynchronous Operations**: Utilize `async/await` in FastAPI for I/O-bound operations to improve performance. For Flask, consider Celery for background tasks.
- **Security**:
  - Be mindful of common web vulnerabilities (XSS, CSRF, SQL Injection).
  - Handle authentication and authorization securely if applicable.

## General Rules

1.  **Functionality**: Ensure the classifier works as expected and meets the requirements.
2.  **Scalability**: Design the classifier to scale effectively for new industries and higher volumes.
    - Consider efficient algorithms and data structures.
    - Optimize for performance where necessary.
3.  **Maintainability**: Write clean, well-structured, and documented code that is easy to understand and maintain.
    - Follow the Single Responsibility Principle.
    - Keep functions and classes concise.
4.  **Creativity**: Explore innovative solutions to the problem.
5.  **Testing**:
    - Write unit tests using `pytest` to validate the service's functionality.
    - Aim for good test coverage, especially for critical logic.
    - Include tests for edge cases and error conditions.
6.  **Deployment**: Consider how the classifier would be deployed in a production environment.
    - Think about containerization (e.g., Docker).
    - Consider CI/CD pipelines for automated testing and deployment.
7.  **Code Quality**:
    - Provide complete, robust code.
    - Ensure added code is runnable.
    - Follow established patterns in the codebase if extending existing code.
8.  **README**: Keep the `README.md` updated with any changes to setup, running the application, or new features.

## Frontend (If Applicable)

If developing or extending a frontend:

- **React/TypeScript Best Practices**:
  - Use functional components with hooks.
  - Employ TypeScript for static typing.
  - Manage state effectively (e.g., Context API, Redux, Zustand).
  - Structure components logically.
- **Vercel**: Leverage Vercel features for deployment and hosting of frontend applications.

## Infrastructure (If Applicable)

- **Terraform**: Use Terraform for managing infrastructure as code if GCP/AWS resources are provisioned.
- Follow best practices for writing modular and maintainable Terraform configurations.
