# Project Engineering Rules – HeronAI Document Classifier Demo

These rules apply to every code change, design decision, and pull-request in this repository. These MUST be followed.

---

## 1. Objective

Build a production-leaning _document-classification micro-service_ that can be scaled to millions of files per day while remaining **simple, testable, and maintainable**.

---

## 2. Tech Stack

- **Backend**: Python 3.11, **FastAPI** (async) + legacy Flask shim.
- **Parsing & ML**: pdfminer.six, docx2txt, pandas, scikit-learn, pytesseract.
- **Infra-ready**: GCP / AWS / Terraform (future); Docker & Vercel for demo deploy.
- **CI/CD**: GitHub Actions – lint ➜ type-check ➜ test ➜ deploy.
- **Testing**: `pytest` with ≥ 95 % coverage.

---

## 3. Code Quality

1. **Single Responsibility** – one reason to change per module/class/function.
2. **Small Units** – max 40 lines per function, 1 public class per file.
3. **Explicit Types** – 100 % type hints, `mypy --strict` passes in CI.
4. **Style Guardrails** – `black` (line ≈ 88), `ruff`, no unused code.
5. **No Catch-all** – never `except Exception`; create domain-specific errors under `core.exceptions`.
6. **Async First** – any I/O (file, network, DB) is `async`/`await`.
7. **Zero Globals** – use dependency-injection or factory functions.
8. **Code comments** – only when intent isn't obvious; don't use too many comments.
9. `__init__.py` – only import modules, not packages. For the most part these should be empty.

---

## 4. Readability & Maintainability

- **Intention-Revealing Names** – avoid abbreviations beyond common acronyms.
- **Minimal Docstrings** – only when intent isn't obvious; use Google style.
- **Structured Logging** – `structlog` JSON with `request_id`, user, path, and latency.

---

## 5. Repository Layout (enforced)

```
src/
  api/            # FastAPI app & routers
  ingestion/      # file validation & streaming
  parsing/        # pdf.py, docx.py, csv.py, image.py
  classification/ # pipeline, stages, model, confidence
  core/           # config, logging, exceptions
  utils/          # auth, timers, helpers
scripts/          # train_model.py, generate_synthetic.py
tests/            # unit/, integration/, data/
```

✱ Add new code **only** within these boundaries or justified sub-dirs.

---

## 6. FastAPI Best Practices

- Use **Pydantic** for all request/response models.
- Separate routers by domain (`files.py`, `admin.py`, `jobs.py`).
- Register global exception & logging middleware in `api/__init__.py`.
- Provide `/v1/health`, `/v1/version`, `/metrics`, and OpenAPI JSON.

---

## 7. Scalability & Performance

- Stream uploads in 64 KB chunks – never read entire file into memory when unnecessary.
- Early-exit in classifier pipeline when confidence ≥ 0.9.
- Make parsing adapters swap-able via strategy pattern.
- Simulate retry logic with exponential back-off (max 3 attempts).

---

## 8. Testing Matrix

- **Unit** – every pure function or stage.
- **Integration** – `/v1/files` happy path, edge cases (empty, corrupt, batch > limit).
- **Load** – Locust hitting `/v1/files` 100 RPS × 5 min (optional).
- Fail CI if coverage < 95 %.

---

## 9. CI/CD Requirements

- Workflow `ci.yml` steps: `ruff`, `black --check`, `mypy --strict`, `pytest` with coverage, SBOM.
- Workflow `deploy.yml`: on push to `main`/tag → `vercel --prod`.
- Artefacts: coverage XML, SBOM.

---

## 10. Deployment & Containerisation

- Provide multi-stage **Dockerfile** (builder → slim runtime).
- `docker-compose.yml` for local app + Redis + Postgres (optional).
- Vercel deployment must succeed without Docker; container path opt-in.

---

## 11. Security & Auth

- Header `x-api-key` validated against `ALLOWED_API_KEYS` env.
- Middleware attaches `request.user`; extendable to JWT.
- All traffic HTTPS (handled by Vercel).

---

## 12. Observability

- `prometheus_fastapi_instrumentator` for metrics; histogram latency by route.
- Alert threshold: 5xx rate > 1 % over 5 min.

---

## 13. Documentation

- Keep `README.md` updated – setup, architecture ASCII, hotkeys J/K/L.
- Add `docs/limitations.md` & `docs/frontend_setup.md` when relevant.

---

## 14. Hotkeys

- **J** – Request deeper dive into pipeline implementation.
- **K** – Ask for Terraform infra spec.
- **L** – Open discussion on UI scope.

---

### Non-Negotiables

• All new code merged to `main` _must_ have passing CI and adhere to these rules.
• Violations trigger code review feedback or CI failure.
