###############################################################################
# docker-compose.yml ─ Local Development Stack
# -----------------------------------------------------------------------------
# Spin-up the HeronAI service together with Redis (async queues, rate limiting)
# and Postgres (future persistence/audit logs) in **one command**:
#
#     docker compose up --build
#
# The stack follows the spec's requirements (§10 Containerisation) and is kept
# lean so CI/CD runners can bring it up quickly for integration tests.
###############################################################################
version: "3.9"

volumes:
  postgres_data: {} # durable volume for Postgres

services:
  # -------------------------------------------------------------------------
  # 1. Application – FastAPI + legacy Flask shim
  # -------------------------------------------------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env # copy .env.example → .env and tweak if needed
    ports:
      - "8000:8000" # host:container
    depends_on:
      - redis
      - db
    command: >
      uvicorn src.api.app:app
      --host 0.0.0.0
      --port 8000
      --proxy-headers     # honours X-Forwarded-* if behind reverse proxy
    restart: unless-stopped

  # -------------------------------------------------------------------------
  # 2. Redis – lightweight in-memory store for async jobs / rate-limiting
  # -------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    restart: unless-stopped

  # -------------------------------------------------------------------------
  # 3. Postgres – future persistence layer (not used by runtime yet)
  # -------------------------------------------------------------------------
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: heron
      POSTGRES_PASSWORD: heron
      POSTGRES_DB: heronai
    volumes:
      - postgres_data:/var/lib/postgresql/data
